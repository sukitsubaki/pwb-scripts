#!/usr/bin/python
# -*- coding: utf-8 -*-

import pywikibot
from pywikibot import pagegenerators
import re

"""
pwb_license_validator.py - Validates license information on uploaded files

This script checks if all uploaded files have valid license information
and creates a report of files that need to be verified.

Usage:
    python pwb_license_validator.py
"""

# Site and category definition
site = pywikibot.Site('commons', 'commons')
category = pywikibot.Category(site, 'Category:YOUR_UPLOADS_CATEGORY')

# List of valid license templates
VALID_LICENSES = [
    '{{self|cc-by-sa-4.0}}',
    '{{self|cc-by-4.0}}',
    '{{self|cc-by-sa-3.0}}',
    '{{self|cc-by-3.0}}',
    '{{self|cc-zero}}',
    '{{PD-self}}',
    '{{cc-by-sa-4.0}}',
    '{{cc-by-4.0}}',
    '{{cc-by-sa-3.0}}',
    '{{cc-by-3.0}}',
    '{{cc-zero}}',
    # Add more valid license templates as needed
]

# Additional license patterns using regex
LICENSE_PATTERNS = [
    r'{{self\|cc-by-sa-\d\.\d}}',
    r'{{self\|cc-by-\d\.\d}}',
    r'{{cc-by-sa-\d\.\d}}',
    r'{{cc-by-\d\.\d}}',
    # Add more regex patterns as needed
]

def has_valid_license(text):
    """Check if the page text contains a valid license."""
    
    # First check exact matches
    for license in VALID_LICENSES:
        if license in text:
            return True
    
    # Then check regex patterns
    for pattern in LICENSE_PATTERNS:
        if re.search(pattern, text):
            return True
    
    return False

def main():
    # Generator to process files in the category
    file_generator = pagegenerators.CategorizedPageGenerator(category, recurse=True)
    
    # Lists for files with and without valid licenses
    files_without_license = []
    files_with_license = []
    
    print("Checking files for valid license information...")
    
    # Process each file
    for file_page in file_generator:
        if not file_page.exists() or file_page.namespace() != 6:  # Namespace 6 = File namespace
            continue
        
        file_title = file_page.title()
        print(f"Checking file: {file_title}")
        
        # Check for license
        if has_valid_license(file_page.text):
            print(f"✓ Valid license found for {file_title}")
            files_with_license.append(file_title)
        else:
            print(f"✗ No valid license found for {file_title}")
            files_without_license.append(f"* [[:{file_title}]]\n")
    
    # Create report
    print("\nGenerating report...")
    
    # Calculate statistics
    total_files = len(files_with_license) + len(files_without_license)
    if total_files > 0:
        license_percentage = (len(files_with_license) / total_files) * 100
    else:
        license_percentage = 0
    
    # Create report content
    page_content = f"""= License Validation Report =

== Summary ==
* Total files checked: {total_files}
* Files with valid license: {len(files_with_license)} ({license_percentage:.1f}%)
* Files without valid license: {len(files_without_license)} ({100-license_percentage:.1f}%)

== Files Missing Proper License Information ==
The following files need license verification:

"""
    
    if files_without_license:
        page_content += ''.join(files_without_license)
    else:
        page_content += "No files found without license information. Great job!"
    
    # Add timestamp
    page_content += f"\n\nReport generated by pwb_license_validator.py on ~~~~~"
    
    # Save report to user page
    try:
        user_page = pywikibot.Page(site, 'User:YOUR_USERNAME/pwb/License_Report')
        user_page.text = page_content
        user_page.save(summary="pwb: Updated license validation report")
        print(f"Report saved to {user_page.title()}")
    except Exception as e:
        print(f"Error saving report: {e}")
        print("Report content:")
        print(page_content)

if __name__ == "__main__":
    main()
