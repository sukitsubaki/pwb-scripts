results.append(result)
        
        # Generate report
        report = create_report(category_name, old_text, new_text, results)
        
        # Save report unless it's a dry run
        if not dry_run:
            save_report(report)
        
        return results
    
    except Exception as e:
        print(f"Error processing category {category_name}: {e}")
        return []

def create_report(category_name, old_text, new_text, results):
    """
    Create a detailed report of text replacement operations.
    
    Args:
        category_name (str): Category processed
        old_text (str): Text that was replaced
        new_text (str): Replacement text
        results (list): List of replacement operation results
    
    Returns:
        str: Formatted report in wiki markup
    """
    report = f"""= Text Replacement Report =

== Summary ==
* Category: {category_name}
* Text to replace: `{old_text}`
* Replacement text: `{new_text}`
* Total files processed: {len(results)}
* Successful replacements: {sum(1 for r in results if r.get('success'))}
* Failed replacements: {sum(1 for r in results if not r.get('success'))}

== Replacement Details ==
"""
    
    # Successful replacements
    report += "\n=== Successful Replacements ===\n"
    successful = [r for r in results if r.get('success')]
    if successful:
        for result in successful:
            report += f"* [[:{result['title']}]]\n"
    else:
        report += "No successful replacements.\n"
    
    # Failed replacements
    report += "\n=== Failed Replacements ===\n"
    failed = [r for r in results if not r.get('success')]
    if failed:
        for result in failed:
            report += f"* [[:{result['title']}]]: {result.get('error', 'Unknown error')}\n"
    else:
        report += "No failed replacements.\n"
    
    report += f"\nReport generated by pwb_text_replace.py on ~~~~~"
    
    return report

def save_report(report):
    """
    Save the report to a user page.
    
    Args:
        report (str): Report content to save
    """
    try:
        user_page = pywikibot.Page(site, 'User:YOUR_USERNAME/pwb/Text_Replace_Report')
        user_page.text = report
        user_page.save(summary="pwb: Updated text replacement report")
        print(f"Report saved to {user_page.title()}")
    except Exception as e:
        print(f"Error saving report: {e}")
        print("Report content:")
        print(report)

def interactive_mode():
    """Interactive mode for text replacement."""
    print("=== PWB Text Replacement Tool ===")
    
    while True:
        print("\nOptions:")
        print("1. Replace text in a category")
        print("2. Exit")
        
        choice = input("\nEnter your choice (1-2): ").strip()
        
        if choice == '1':
            # Get replacement details
            category_name = input("Enter category name: ").strip()
            old_text = input("Enter text to replace: ").strip()
            new_text = input("Enter replacement text: ").strip()
            
            # Advanced options
            use_regex = input("Use regex for replacement? (y/n): ").lower() == 'y'
            dry_run = input("Perform a dry run (preview only)? (y/n): ").lower() == 'y'
            confirm_each = input("Confirm each replacement? (y/n): ").lower() == 'y'
            
            # Confirm replacement
            print("\nReplacement Configuration:")
            print(f"Category: {category_name}")
            print(f"Text to replace: '{old_text}'")
            print(f"Replacement text: '{new_text}'")
            print(f"Regex mode: {'Yes' if use_regex else 'No'}")
            print(f"Dry run: {'Yes' if dry_run else 'No'}")
            print(f"Confirm each replacement: {'Yes' if confirm_each else 'No'}")
            
            confirm = input("\nProceed with replacement? (y/n): ").lower()
            
            if confirm == 'y':
                # Perform replacement
                results = process_category(
                    category_name, 
                    old_text, 
                    new_text, 
                    use_regex=use_regex,
                    dry_run=dry_run,
                    confirm_each=confirm_each
                )
                
                # Display summary
                successful = sum(1 for r in results if r.get('success'))
                print(f"\nProcessed {len(results)} files")
                print(f"Successful replacements: {successful}")
        
        elif choice == '2':
            print("Exiting...")
            break
        
        else:
            print("Invalid choice")

def main():
    """
    Main function to handle command-line arguments and script execution.
    """
    parser = argparse.ArgumentParser(description='Replace text in file descriptions on Wikimedia Commons')
    
    # Create mutually exclusive group for the modes
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--category', help='Process files in a specific category')
    group.add_argument('--interactive', action='store_true', help='Run in interactive mode')
    
    # Additional arguments
    parser.add_argument('--replace', help='Text to replace')
    parser.add_argument('--with', dest='replacement', help='Replacement text')
    parser.add_argument('--regex', action='store_true', help='Use regex for replacement')
    parser.add_argument('--dry-run', action='store_true', help='Preview changes without saving')
    
    args = parser.parse_args()
    
    if args.interactive:
        interactive_mode()
    elif args.category:
        # Validate required arguments
        if not args.replace or not args.replacement:
            print("Error: --replace and --with arguments are required when specifying a category")
            return
        
        # Perform replacement
        results = process_category(
            args.category, 
            args.replace, 
            args.replacement, 
            use_regex=args.regex,
            dry_run=args.dry_run
        )
        
        # Display summary
        successful = sum(1 for r in results if r.get('success'))
        print(f"Processed {len(results)} files")
        print(f"Successful replacements: {successful}")

if __name__ == "__main__":
    main()