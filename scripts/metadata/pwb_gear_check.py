#!/usr/bin/python
# -*- coding: utf-8 -*-

import pywikibot
from pywikibot import pagegenerators
import re
import argparse

"""
pwb_gear_check.py - Check for missing camera and lens information

This script analyzes files in a specified category to identify 
images without proper camera or lens metadata. It helps photographers 
maintain comprehensive documentation of their equipment.

Features:
- Scan files for camera and lens information
- Generate a report of files missing gear details
- Support for interactive and batch processing
- Configurable search patterns

Usage:
    python pwb_gear_check.py --category "YOUR_UPLOADS_CATEGORY"
    python pwb_gear_check.py --interactive
"""

# Site and category configuration
site = pywikibot.Site('commons', 'commons')

# Configurable gear information patterns
GEAR_PATTERNS = {
    'camera': [
        r'Gear/CAMERA',
        r'Camera\s*[:=]',
        r'Equipment\s*[:=]',
        r'Camera\s*Model'
    ],
    'lens': [
        r'Gear/LENS',
        r'Lens\s*[:=]',
        r'Lens\s*Model'
    ]
}

def check_file_gear_info(file_page, patterns=None):
    """
    Check a file for camera and lens information.
    
    Args:
        file_page (pywikibot.Page): File page to check
        patterns (dict, optional): Regex patterns to search for
    
    Returns:
        dict: Gear information check results
    """
    if patterns is None:
        patterns = GEAR_PATTERNS
    
    try:
        # Get file text
        text = file_page.text.lower()
        
        # Check results
        results = {
            'title': file_page.title(),
            'missing': []
        }
        
        # Check for camera information
        if not any(re.search(pattern, text) for pattern in patterns['camera']):
            results['missing'].append('Camera Information')
        
        # Check for lens information
        if not any(re.search(pattern, text) for pattern in patterns['lens']):
            results['missing'].append('Lens Information')
        
        return results
    
    except Exception as e:
        pywikibot.error(f"Error checking gear info for {file_page.title()}: {e}")
        return {
            'title': file_page.title(),
            'missing': ['Error processing file'],
            'error': str(e)
        }

def process_category(category_name, patterns=None):
    """
    Process all files in a category and check for gear information.
    
    Args:
        category_name (str): Name of the category to process
        patterns (dict, optional): Regex patterns to search for
    
    Returns:
        tuple: (total files processed, files missing gear info)
    """
    # Ensure category has Category: prefix
    if not category_name.startswith('Category:'):
        category_name = f'Category:{category_name}'
    
    try:
        category = pywikibot.Category(site, category_name)
        
        if not category.exists():
            pywikibot.error(f"Category {category_name} does not exist")
            return 0, []
        
        total_files = 0
        files_missing_gear = []
        
        for file_page in pagegenerators.CategorizedPageGenerator(category, recurse=False):
            if file_page.namespace() != 6:  # Namespace 6 = File namespace
                continue
            
            total_files += 1
            
            # Check gear information
            gear_check = check_file_gear_info(file_page, patterns)
            
            if gear_check['missing'] and 'Error processing file' not in gear_check['missing']:
                files_missing_gear.append(gear_check)
        
        # Generate and save report
        report = create_report(category_name, total_files, files_missing_gear)
        save_report(report)
        
        return total_files, files_missing_gear
    
    except Exception as e:
        pywikibot.error(f"Error processing category {category_name}: {e}")
        return 0, []

def create_report(category_name, total_files, files_missing_gear):
    """
    Create a report of gear information check results.
    
    Args:
        category_name (str): Name of the processed category
        total_files (int): Total number of files processed
        files_missing_gear (list): List of files missing gear information
    
    Returns:
        str: Formatted report in wiki markup
    """
    report = f"""= Gear Information Check Report =

== Summary ==
* Category processed: {category_name}
* Total files: {total_files}
* Files missing gear information: {len(files_missing_gear)}

== Files Missing Gear Information ==
"""
    
    if files_missing_gear:
        for file_info in files_missing_gear:
            report += f"* [[:{file_info['title']}]]\n"
            for missing_info in file_info['missing']:
                report += f"  - Missing: {missing_info}\n"
    else:
        report += "No files with missing gear information found.\n"
    
    report += f"\nReport generated by pwb_gear_check.py on ~~~~~"
    
    return report

def save_report(report):
    """
    Save the report to a user page.
    
    Args:
        report (str): Report content to save
    """
    try:
        user_page = pywikibot.Page(site, 'User:YOUR_USERNAME/pwb/Gear_Check_Report')
        user_page.text = report
        user_page.save(summary="pwb: Updated gear information check report")
        print(f"Report saved to {user_page.title()}")
    except Exception as e:
        print(f"Error saving report: {e}")
        print("Report content:")
        print(report)

def interactive_mode():
    """Interactive mode for gear information checking."""
    print("=== PWB Gear Information Check Tool ===")
    
    while True:
        print("\nOptions:")
        print("1. Check gear information in a category")
        print("2. Exit")
        
        choice = input("\nEnter your choice (1-2): ").strip()
        
        if choice == '1':
            category_name = input("Enter category name (with or without 'Category:' prefix): ").strip()
            
            # Optional: Custom gear patterns
            use_custom = input("Use custom gear information patterns? (y/n): ").lower() == 'y'
            custom_patterns = None
            
            if use_custom:
                custom_patterns = {
                    'camera': [],
                    'lens': []
                }
                print("Enter custom regex patterns (leave blank to skip)")
                camera_patterns = input("Camera patterns (comma-separated): ").strip()
                lens_patterns = input("Lens patterns (comma-separated): ").strip()
                
                if camera_patterns:
                    custom_patterns['camera'] = [p.strip() for p in camera_patterns.split(',')]
                if lens_patterns:
                    custom_patterns['lens'] = [p.strip() for p in lens_patterns.split(',')]
            
            # Process category
            total_files, files_missing_gear = process_category(
                category_name, 
                patterns=custom_patterns
            )
            
            print(f"\nProcessed {total_files} files")
            print(f"Files missing gear information: {len(files_missing_gear)}")
        
        elif choice == '2':
            print("Exiting...")
            break
        
        else:
            print("Invalid choice")

def main():
    """
    Main function to handle command-line arguments and script execution.
    """
    parser = argparse.ArgumentParser(description='Check gear information in Wikimedia Commons files')
    
    # Create mutually exclusive group for the modes
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--category', help='Process files in a specific category')
    group.add_argument('--interactive', action='store_true', help='Run in interactive mode')
    
    # Optional custom pattern arguments
    parser.add_argument('--camera-patterns', nargs='+', 
                        help='Custom regex patterns for camera information')
    parser.add_argument('--lens-patterns', nargs='+', 
                        help='Custom regex patterns for lens information')
    
    args = parser.parse_args()
    
    # Prepare custom patterns if provided
    custom_patterns = None
    if args.camera_patterns or args.lens_patterns:
        custom_patterns = {
            'camera': args.camera_patterns or [],
            'lens': args.lens_patterns or []
        }
    
    if args.interactive:
        interactive_mode()
    elif args.category:
        total_files, files_missing_gear = process_category(
            args.category, 
            patterns=custom_patterns
        )
        print(f"Processed {total_files} files")
        print(f"Files missing gear information: {len(files_missing_gear)}")

if __name__ == "__main__":
    main()